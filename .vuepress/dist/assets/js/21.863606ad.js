(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{218:function(e,n,t){"use strict";t.r(n);var c=t(0),a=Object(c.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker开发流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker开发流程"}},[e._v("#")]),e._v(" docker开发流程")]),e._v(" "),t("p",[e._v("注意容器构建时的信息：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Install runc version 992a5be178a62e026f4069f443c6164912adbf09\n+ git clone https://github.com/opencontainers/runc.git /tmp/tmp.NdftaLJucp/src/github.com/opencontainers/runc\nCloning into \'/tmp/tmp.NdftaLJucp/src/github.com/opencontainers/runc\'...\n+ cd /tmp/tmp.NdftaLJucp/src/github.com/opencontainers/runc\n+ git checkout -q 992a5be178a62e026f4069f443c6164912adbf09\n+ make BUILDTAGS=seccomp apparmor selinux static\nCGO_ENABLED=1 go build -i -tags "seccomp apparmor selinux cgo static_build" -ldflags "-w -extldflags -static -X main.gitCommit="992a5be178a62e026f4069f443c6164912adbf09" -X main.version=1.0.0-rc3" -o runc .\nCGO_ENABLED=1 go build -i -tags "seccomp apparmor selinux cgo static_build" -ldflags "-w -extldflags -static -X main.gitCommit="992a5be178a62e026f4069f443c6164912adbf09" -X main.version=1.0.0-rc3" -o contrib/cmd/recvtty/recvtty ./contrib/cmd/recvtty\n\x3c!--more--\x3e\n+ cp runc /usr/local/bin/docker-runc\n+ install_containerd static\n+ echo Install containerd version 8ef7df579710405c4bb6e0812495671002ce08e0\nInstall containerd version 8ef7df579710405c4bb6e0812495671002ce08e0\n+ git clone https://github.com/containerd/containerd.git /tmp/tmp.NdftaLJucp/src/github.com/containerd/containerd\nCloning into \'/tmp/tmp.NdftaLJucp/src/github.com/containerd/containerd\'...\n+ cd /tmp/tmp.NdftaLJucp/src/github.com/containerd/containerd\n+ git checkout -q 8ef7df579710405c4bb6e0812495671002ce08e0\n+ make static\ncd ctr && go build -ldflags "-w -extldflags -static -X github.com/containerd/containerd.GitCommit=8ef7df579710405c4bb6e0812495671002ce08e0 " -tags "" -o ../bin/ctr\ncd containerd && go build -ldflags "-w -extldflags -static -X github.com/containerd/containerd.GitCommit=8ef7df579710405c4bb6e0812495671002ce08e0 " -tags "" -o ../bin/containerd\ncd containerd-shim && go build -ldflags "-w -extldflags -static -X github.com/containerd/containerd.GitCommit=8ef7df579710405c4bb6e0812495671002ce08e0 " -tags "" -o ../bin/containerd-shim\n+ cp bin/containerd /usr/local/bin/docker-containerd\n+ cp bin/containerd-shim /usr/local/bin/docker-containerd-shim\n+ cp bin/ctr /usr/local/bin/docker-containerd-ctr\n+ echo Install tini version 949e6facb77383876aeff8a6944dde66b3089574\n+ git clone https://github.com/krallin/tini.git /tmp/tmp.NdftaLJucp/tini\nInstall tini version 949e6facb77383876aeff8a6944dde66b3089574\nCloning into \'/tmp/tmp.NdftaLJucp/tini\'...\n+ cd /tmp/tmp.NdftaLJucp/tini\n+ git checkout -q 949e6facb77383876aeff8a6944dde66b3089574\n+ cmake .\n-- The C compiler identification is GNU 4.9.2\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Performing Test HAS_BUILTIN_FORTIFY\n-- Performing Test HAS_BUILTIN_FORTIFY - Failed\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /tmp/tmp.NdftaLJucp/tini\n+ make tini-static\nScanning dependencies of target tini-static\n[100%] Building C object CMakeFiles/tini-static.dir/src/tini.c.o\nLinking C executable tini-static\n[100%] Built target tini-static\n+ cp tini-static /usr/local/bin/docker-init\n+ export CGO_ENABLED=0\n+ install_proxy\n+ echo Install docker-proxy version 7b2b1feb1de4817d522cc372af149ff48d25028e\nInstall docker-proxy version 7b2b1feb1de4817d522cc372af149ff48d25028e\n+ git clone https://github.com/docker/libnetwork.git /tmp/tmp.NdftaLJucp/src/github.com/docker/libnetwork\nCloning into \'/tmp/tmp.NdftaLJucp/src/github.com/docker/libnetwork\'...\n+ cd /tmp/tmp.NdftaLJucp/src/github.com/docker/libnetwork\n+ git checkout -q 7b2b1feb1de4817d522cc372af149ff48d25028e\n+ go build -ldflags= -o /usr/local/bin/docker-proxy github.com/docker/libnetwork/cmd/proxy\n+ install_bindata\n+ echo Install go-bindata version a0ff2567cfb70903282db057e799fd826784d41d\n+ git clone https://github.com/jteeuwen/go-bindata /tmp/tmp.NdftaLJucp/src/github.com/jteeuwen/go-bindata\nInstall go-bindata version a0ff2567cfb70903282db057e799fd826784d41d\nCloning into \'/tmp/tmp.NdftaLJucp/src/github.com/jteeuwen/go-bindata\'...\n+ cd /tmp/tmp.NdftaLJucp/src/github.com/jteeuwen/go-bindata\n+ git checkout -q a0ff2567cfb70903282db057e799fd826784d41d\n+ go build -o /usr/local/bin/go-bindata github.com/jteeuwen/go-bindata/go-bindata\n+ install_dockercli\n+ echo Install docker/cli version 7230906e0e297999eb33da74e0279c5cf41a119e\n+ git clone https://github.com/dperny/cli /tmp/tmp.NdftaLJucp/src/github.com/docker/cli\nInstall docker/cli version 7230906e0e297999eb33da74e0279c5cf41a119e\nCloning into \'/tmp/tmp.NdftaLJucp/src/github.com/docker/cli\'...\n+ cd /tmp/tmp.NdftaLJucp/src/github.com/docker/cli\n+ git checkout -q 7230906e0e297999eb33da74e0279c5cf41a119e\n+ go build -o /usr/local/bin/docker github.com/docker/cli/cmd/docker\n+ [ 1 -eq 1 ]\n+ rm -rf /tmp/tmp.NdftaLJucp\n')])])]),t("h3",{attrs:{id:"编译docker源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译docker源码"}},[e._v("#")]),e._v(" 编译docker源码")]),e._v(" "),t("p",[e._v("clone moby")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ git clone https://github.com/moby/moby\n")])])]),t("p",[e._v("创建一个分支：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ git checkout dry-run-test\n")])])]),t("p",[e._v("构建容器编译：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ make BIND_DIR=. shell\n")])])]),t("p",[e._v("运行容器：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('docker run --rm -i --privileged \\\n-e BUILDFLAGS -e KEEPBUNDLE \\\n-e DOCKER_BUILD_GOGC \\\n-e DOCKER_BUILD_PKGS \\\n-e DOCKER_CLIENTONLY \\\n-e DOCKER_DEBUG \\\n-e DOCKER_EXPERIMENTAL \\\n-e DOCKER_GITCOMMIT \\\n-e DOCKER_GRAPHDRIVER=devicemapper \\\n-e DOCKER_INCREMENTAL_BINARY \\\n-e DOCKER_REMAP_ROOT -e DOCKER_STORAGE_OPTS \\\n-e DOCKER_USERLANDPROXY -e TESTDIRS \\\n-e TESTFLAGS -e TIMEOUT \\\n-v "home/ubuntu/repos/docker/bundles:/go/src/github.com/moby/moby/bundles" -t "docker-dev:dry-run-test" bash\nroot@f31fa223770f:/go/src/github.com/moby/moby#\n')])])]),t("p",[e._v("我们启动容器时小作修改使可以很方便的在本机上改代码，在容器里构建：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('docker run --rm -i --privileged \\\n    -e BUILDFLAGS -e KEEPBUNDLE \\\n    -e DOCKER_BUILD_GOGC \\\n    -e DOCKER_BUILD_PKGS \\\n    -e DOCKER_CLIENTONLY \\\n    -e DOCKER_DEBUG \\\n    -e DOCKER_EXPERIMENTAL \\\n    -e DOCKER_GITCOMMIT \\\n    -e DOCKER_GRAPHDRIVER=devicemapper \\\n    -e DOCKER_INCREMENTAL_BINARY \\\n    -e DOCKER_REMAP_ROOT -e DOCKER_STORAGE_OPTS \\\n    -e DOCKER_USERLANDPROXY -e TESTDIRS \\\n    -e TESTFLAGS -e TIMEOUT \\\n    -v /Users/fanux/work/src/github.com:/go/src/github.com \\\n    -t "docker-dev:dry-run-test" bash\n')])])]),t("p",[e._v("容器内编译源码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("root@a8b2885ab900:/go/src/github.com/moby/moby# hack/make.sh binary\n...output snipped...\nbundles/1.12.0-dev already exists. Removing.\n\n---\x3e Making bundle: binary (in bundles/1.12.0-dev/binary)\nBuilding: bundles/1.12.0-dev/binary/docker-1.12.0-dev\nCreated binary: bundles/1.12.0-dev/binary/docker-1.12.0-dev\nCopying nested executables into bundles/1.12.0-dev/binary\n")])])]),t("p",[e._v("拷贝bin文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("root@a8b2885ab900:/go/src/github.com/moby/moby# cp bundles/1.12.0-dev/binary-client/docker* /usr/bin/\nroot@a8b2885ab900:/go/src/github.com/moby/moby# cp bundles/1.12.0-dev/binary-daemon/docker* /usr/bin/\n")])])]),t("p",[e._v("启动containerd:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("root@a8b2885ab900:/go/src/github.com/docker/docker# dockerd -D &\n...output snipped...\nDEBU[0001] Registering POST, /networks/{id:.*}/connect\nDEBU[0001] Registering POST, /networks/{id:.*}/disconnect\nDEBU[0001] Registering DELETE, /networks/{id:.*}\nINFO[0001] API listen on /var/run/docker.sock\nDEBU[0003] containerd connection state change: READY\n")])])]),t("p",[e._v("这时你可以修改一些docker的代码了，然后重新编译即可，官方教程是修改了docker的代码，而我更感兴趣的是runc，下面就来改改runc试试。")]),e._v(" "),t("h2",{attrs:{id:"修改runc代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改runc代码"}},[e._v("#")]),e._v(" 修改runc代码")]),e._v(" "),t("p",[e._v("在容器内执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("mkdir /mycontainer\ncd /mycontainer\nmkdir rootfs\ndocker export $(docker create busybox) | tar -C rootfs -xvf -\n# 生成容器的配置文件config.json\ndocker-runc spec\ndocker-runc run mycontainerid\n")])])]),t("p",[e._v("进到github.com/opencontainers/runc/run.go，修改代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('spec, err := setupSpec(context)\nfmt.Println("spec is: ", *spec)\n')])])]),t("p",[e._v("再容器runc目录构建runc：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("make && make install\n")])])]),t("p",[e._v("这时再到mycontainer目录用我们构建的这个runc运行容器,我们打印的信息出来了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("root@7d8c68bba090:/go/src/github.com/opencontainers/mycontainer# runc run test\nspec is:  {1.0.0-rc5 {linux amd64} {true {0 0} {0 0 [] } [sh] [PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin TERM=xterm] / 0xc42001a500 [{RLIMIT_NOFILE 1024 1024}] true  } {rootfs true} runc [{/proc proc proc []} {/dev tmpfs tmpfs [nosuid strictatime mode=755 size=65536k]} {/dev/pts devpts devpts [nosuid noexec newinstance ptmxmode=0666 mode=0620 gid=5]} {/dev/shm tmpfs shm [nosuid noexec nodev mode=1777 size=65536k]} {/dev/mqueue mqueue mqueue [nosuid noexec nodev]} {/sys sysfs sysfs [nosuid noexec nodev ro]} {/sys/fs/cgroup cgroup cgroup [nosuid noexec nodev relatime ro]}] <nil> map[] 0xc420084380 <nil> <nil>}\n/ #\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);