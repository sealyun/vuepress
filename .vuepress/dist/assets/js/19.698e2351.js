(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{212:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes开发流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes开发流程"}},[e._v("#")]),e._v(" kubernetes开发流程")]),e._v(" "),a("h1",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("本文介绍如何对kubernetes进行二次开发，仓库如何管理，git分支如何管理，怎样利用CI去编译与发布以及如何给社区贡献代码等，结合实际例子，望对大家有所帮助。")]),e._v(" "),a("h1",{attrs:{id:"开发环境构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发环境构建"}},[e._v("#")]),e._v(" 开发环境构建")]),e._v(" "),a("p",[a("img",{attrs:{src:"/k8s-repo.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork"}},[e._v("#")]),e._v(" Fork")]),e._v(" "),a("p",[e._v("把github.com/kubernetes/kubernetes 项目fork到自己的仓库")]),e._v(" "),a("h2",{attrs:{id:"clone到本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clone到本地"}},[e._v("#")]),e._v(" Clone到本地")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git clone https://github.com/<your-username>/kubernetes \n")])])]),a("h2",{attrs:{id:"设置remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置remote"}},[e._v("#")]),e._v(" 设置remote")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git remote add upstream https://github.com/kubernetes/kubernetes.git\ngit remote set-url --push upstream no-pushing\n")])])]),a("p",[e._v("注意此时你的本地仓库就有了两个远程仓库，一个叫upstream(社区仓库) 一个叫origin(你fork的)")]),e._v(" "),a("h2",{attrs:{id:"代码同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码同步"}},[e._v("#")]),e._v(" 代码同步")]),e._v(" "),a("p",[e._v("当社区仓库代码更新时，我们希望与之同步，那么：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git pull upstream master  # 先同步到本地\ngit push                  # push 到origin\n")])])]),a("p",[e._v("你修改了代码希望同步给社区，那么PR即可")]),e._v(" "),a("h1",{attrs:{id:"分支管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[e._v("#")]),e._v(" 分支管理")]),e._v(" "),a("p",[a("img",{attrs:{src:"/k8s-git-flow.png",alt:""}})]),e._v(" "),a("p",[e._v("假设我们要定制一个功能，比如我之前做的对kubelet进行lxcfs增强，而我们线上又运行了多个版本的k8s，我们希望这个特性几个版本都可以加上，而且未来k8s发布新版本时同样能merge进去这功能。")]),e._v(" "),a("p",[e._v("要做到这个git里的两个命令非常重要：")]),e._v(" "),a("ul",[a("li",[e._v("git cherry-pick 能指定merge特定的变更")]),e._v(" "),a("li",[e._v("git rebase      通常我用来合并多个commit, 虽然cherry-pick也支持多个commit，但是多了容易混乱")])]),e._v(" "),a("p",[e._v("首先从master分支HEAD切出一个分支，我们有所的功能开发在这个分支上进行，如我做了c1 c2两次commit。")]),e._v(" "),a("p",[e._v("然后希望把这个功能merge到2.0版本中，我们先从2.0的tag切一个分支出来，然后在这个分之上去cherry-pick c1 c2即可，非常简单方便，其它版本需要此功能同理。")]),e._v(" "),a("p",[e._v("这里注意，如果不用cherry-pick 直接merge的话，因为2.0版本之后还有很多次变更，会产生大量冲突。")]),e._v(" "),a("h1",{attrs:{id:"ci编译与发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci编译与发布"}},[e._v("#")]),e._v(" CI编译与发布")]),e._v(" "),a("p",[e._v("笔者比较喜欢drone，所以编译与发布都是用的drone，安利个"),a("a",{attrs:{href:"https://cloud.drone.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("drone免费公有服务"),a("OutboundLink")],1),e._v("非常好用")]),e._v(" "),a("p",[a("img",{attrs:{src:"/build-k8s.png",alt:""}})]),e._v(" "),a("pre",[a("code",[e._v("由于k8s各个版本可能需要的golang版本都不太一样，所以最方便的还是在容器中进行构建，但并不是随便一个golang的镜像都可以进行构建，因为k8s还需要拷贝代码，生成代码等依赖了一些小工具，我这里提供了一个官方的编译镜像：fanux/kube-build:v1.12.1-2\n\n发布时用了drone一个非常方便的插件：plugins/github-release， 可以直接把二进制文件放到github的release pages里\n")])]),e._v(" "),a("p",[e._v(".drone.yml 长这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('kind: pipeline\nname: default\nworkspace:\n    base: /go\n    path: src/k8s.io/kubernetes  # 要注意工作目录一定要写这个\n\nsteps:\n- name: build                    # 编译，名字随便写\n  image: fanux/kube-build:v1.12.1-2  \n  environment: \n    GO111MODULE: on              # 启动go mod\n  commands:\n      - make generated_files UPDATE_API_KNOWN_VIOLATIONS=true   # 这个是一个known api校验，不加编译可能会报错\n      - KUBE_GIT_TREE_STATE="clean" KUBE_GIT_VERSION=v1.14.0 KUBE_BUILD_PLATFORMS=linux/amd64 make all WHAT=cmd/kubelet GOFLAGS=-v  # 几个环境变量特别重要，如不加clean编译出来版本号就会加dirty后缀，需要加版本号不然很多时候无法正常工作，加构建平台，这样无需编译多个bin文件加快编译速度，WHAT里指定需要编译什么代码，大部分情况无需编译有所组件\n      - ls  _output/bin/  # 这里能看到编译后的二进制文件\n\n- name: publish\n  image: plugins/github-release\n  settings:\n    api_key: \n        from_secret: git-release-token\n    files: _output/bin/kubelet   # 把上一步二进制文件放到release page中\n    title: ${DRONE_TAG}          # 使用你打的tag作为标题\n    note: Note.md                # 指定一个文件说明你release中干了啥\n    when:\n        event: tag\n')])])]),a("p",[e._v("这样提交代码后刷刷抖音等结果即可。。")]),e._v(" "),a("h1",{attrs:{id:"实践案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践案例"}},[e._v("#")]),e._v(" 实践案例")]),e._v(" "),a("p",[e._v("k8s kubeadm默认证书的时间是一年，我希望延长到99年，这样就需要定制化开发，那么问题来了，因为版本众多，是不是需要每个版本都去改一下，那太麻烦了，正确的做法如下：")]),e._v(" "),a("h2",{attrs:{id:"从master切出一个分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从master切出一个分支"}},[e._v("#")]),e._v(" 从master切出一个分支")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout -b kubeadm\n")])])]),a("p",[e._v("修改代码并commit")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("commit 6d16c60ca5ce8858feeabca7a3a18d59e642ac3f (HEAD -> kubeadm)\nAuthor: fanux <fhtjob@hotmail.com>\nDate:   Mon Mar 18 20:26:08 2019 +0800\n\n    kubeadm with long cert\n\ncommit 364b18cb9ef1e8da2cf09f33d0fd8042de6b327e (upstream/master, origin/master, origin/HEAD, master)\n")])])]),a("p",[e._v("可以看到我们commit了一次，现在只需要把6d16c60ca这个变化merge到各版本即可")]),e._v(" "),a("h2",{attrs:{id:"merge到1-13-4版本中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge到1-13-4版本中"}},[e._v("#")]),e._v(" merge到1.13.4版本中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout -b v1.13.4 v1.13.4\ngit cherry-pick 6d16c60ca5c\n")])])]),a("p",[e._v("注意 这次commit如果修改了相同文件的行还是可能会冲突的，需要手动解决一下冲突")]),e._v(" "),a("p",[e._v("解决完冲突commit即可")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('➜  kubernetes git:(v1.13.4) ✗ git add .\n➜  kubernetes git:(v1.13.4) ✗ git commit -m "v1.13.4-cert"\n[v1.13.4 1bd2e627f5] v1.13.4-cert\n Date: Mon Mar 18 20:26:08 2019 +0800\n 4 files changed, 42 insertions(+), 3 deletions(-)\n create mode 100644 .drone.yml\n create mode 100644 Note.md\n➜  kubernetes git:(v1.13.4) git tag v1.13.4-cert\n➜  kubernetes git:(v1.13.4) git push --tags\n')])])]),a("h1",{attrs:{id:"其它注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它注意事项"}},[e._v("#")]),e._v(" 其它注意事项")]),e._v(" "),a("p",[e._v("要PR给社区的话需要"),a("a",{attrs:{href:"https://github.com/kubernetes/community/blob/master/CLA.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("CLA认证"),a("OutboundLink")],1),e._v("一下, 不然你的PR社区是不管的。")]),e._v(" "),a("p",[e._v("CI加的一些文件如.drone.yml dockerfile等与实际功能的添加最好分开，方便PR时只PR实际需要的代码。")]),e._v(" "),a("p",[e._v("其它组件与apiserver scheduler可以CI直接打成docker镜像，drone很灵活，不要用死了")]),e._v(" "),a("p",[e._v("探讨可加QQ群：98488045")])])}),[],!1,null,null,null);t.default=s.exports}}]);