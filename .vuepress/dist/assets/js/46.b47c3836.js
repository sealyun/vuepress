(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{246:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"macvtap实践教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#macvtap实践教程"}},[e._v("#")]),e._v(" macvtap实践教程")]),e._v(" "),a("p",[e._v("macvtap是虚拟机网络虚拟化常用的一种技术，当然容器也可以用. MACVTAP 的实现基于传统的 MACVLAN. 和 TAP 设备一样，每一个 MACVTAP 设备拥有一个对应的 Linux 字符设备，并拥有和 TAP 设备一样的 IOCTL 接口，因此能直接被 KVM/Qemu使用，方便地完成网络数据交换工作. 引入 MACVTAP 设备的目标是：简化虚拟化环境中的交换网络，代替传统的 Linux TAP 设备加 Bridge 设备组合，同时支持新的虚拟化网络技术，如 802.1 Qbg.")]),e._v(" "),a("p",[e._v("如kata的虚拟化网络就用了这个技术，以下实践完就会对kata的网络原理比较清楚了，建议对照教程动手实践.")]),e._v(" "),a("h1",{attrs:{id:"实验环境介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验环境介绍"}},[e._v("#")]),e._v(" 实验环境介绍")]),e._v(" "),a("p",[a("img",{attrs:{src:"/macvtap.jpg",alt:""}}),e._v("\n此图非常重要，读整篇文章最好脑海里都有")]),e._v(" "),a("h1",{attrs:{id:"初始化环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化环境"}},[e._v("#")]),e._v(" 初始化环境")]),e._v(" "),a("h2",{attrs:{id:"qemu-libvirt环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qemu-libvirt环境"}},[e._v("#")]),e._v(" qemu libvirt环境")]),e._v(" "),a("p",[e._v("我已经做好了qemu libvirt的镜像，大家可以直接使用：\n在容器中有非常多的好处，环境如果乱了可以快速恢复干净的环境。\n使用设备对也可减少对宿主机网络的影响。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run -d --privileged -v /dev:/dev -v /home/fanux:/root --name qemu-vm fanux/libvirt:latest init\n")])])]),a("p",[e._v("注意：")]),e._v(" "),a("ol",[a("li",[e._v("网络等操作需要容器有特权模式")]),e._v(" "),a("li",[e._v("tap网络需要挂载/dev目录")]),e._v(" "),a("li",[e._v("/home/fanux可以作为工作目录，镜像自己编写的libvirt配置等放在里面防止删除容器后丢失")]),e._v(" "),a("li",[e._v("由于libvirt需要systemd所以我们在容器中启动init进程")])]),e._v(" "),a("p",[e._v("也可自己构建镜像，我提供了一个Dockerfile, -j参数根据你机器CPU来设置编译时的线程数:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM centos:7.6.1810\nRUN yum install -y wget && wget https://download.qemu.org/qemu-4.0.0.tar.xz && \\\n    tar xvJf qemu-4.0.0.tar.xz  \\\n    && yum install -y automake gcc-c++ gcc make autoconf libtool gtk2-devel \\\n    && cd qemu-4.0.0 \\\n    && ./configure \\\n    && make -j 72 && make install \\\n    && yum install -y bridge-utils && yum install -y net-tools tunctl iproute && yum -y install openssh-clients \\\n    cd .. && rm qemu-4.0.0.tar.xz && rm -rf qemu-4.0.0\nRUN yum install -y libvirt virt-manager gustfish openssh-clients\n")])])]),a("h2",{attrs:{id:"虚拟机镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机镜像"}},[e._v("#")]),e._v(" 虚拟机镜像")]),e._v(" "),a("p",[e._v("进入容器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@compute84 libvirt]# docker exec -it qemu-vm bash\nbash-4.2# cd\nbash-4.2# ls\nCentOS-7-x86_64-GenericCloud.qcow2     centos.qcow2\t    image    nohup.out\tstart.sh  vm3.xml\nCentOS-7-x86_64-Minimal-1810.iso       cloud-init-start.sh  kernel   qemu\tvm.xml\nFedora-Cloud-Base-30-1.2.x86_64.qcow2  destroy.sh\t    libvirt  run.sh\tvm2.xml\n")])])]),a("p",[e._v("下载虚拟机镜像：")]),e._v(" "),a("p",[e._v("openstack已经提供很多已经装过cloud-init的镜像，地址：\nhttps://docs.openstack.org/image-guide/obtain-images.html")]),e._v(" "),a("p",[e._v("我用的一个比较新的centos的qcow2格式镜像：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1905.qcow2\n")])])]),a("p",[e._v("修改虚拟机root密码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("virt-customize -a CentOS-7-x86_64-GenericCloud.qcow2 --root-password password:coolpass\n")])])]),a("h2",{attrs:{id:"启动虚拟机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动虚拟机"}},[e._v("#")]),e._v(" 启动虚拟机")]),e._v(" "),a("p",[e._v("查看容器网络信息：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# systemctl start libvirtd\nbash-4.2# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: virbr0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000\n    link/ether 52:54:00:c6:59:47 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0\n       valid_lft forever preferred_lft forever\n3: virbr0-nic: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000\n    link/ether 52:54:00:c6:59:47 brd ff:ff:ff:ff:ff:ff\n1310: eth0@if1311: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.17.0.2/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:acff:fe11:2/64 scope link \n       valid_lft forever preferred_lft forever\n")])])]),a("p",[e._v("1,2,3是libvirt创建的可以忽略，最主要是eth0")]),e._v(" "),a("h3",{attrs:{id:"编写libvirt配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写libvirt配置"}},[e._v("#")]),e._v(" 编写libvirt配置")]),e._v(" "),a("p",[e._v("vm3.xml:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<domain type='kvm'>\n  <name>vm3</name>\n  <memory unit='MiB'>2048</memory>\n  <currentMemory unit='MiB'>2048</currentMemory>\n  <os>\n    <type arch='x86_64'>hvm</type>\n    <boot dev='hd'/>\n  </os>\n  <clock offset='utc'/>\n  <on_poweroff>destroy</on_poweroff>\n  <on_reboot>restart</on_reboot>\n  <on_crash>destroy</on_crash>\n  <devices>\n    <emulator>/usr/local/bin/qemu-system-x86_64</emulator>\n  <disk type='file' device='disk'>\n       <driver name='qemu' type='qcow2'/>\n       <source file='/root/CentOS-7-x86_64-GenericCloud.qcow2'/>\n       <target dev='vda' bus='virtio'/>\n  </disk>\n  <interface type='direct'> \n    <source dev='eth0' mode='bridge' /> \n    <model type='virtio' />    \n    <driver name='vhost' /> \n  </interface>\n  <serial type='pty'>\n    <target port='0'/>\n  </serial>\n  <console type='pty'>\n    <target type='serial' port='0'/>\n  </console>\n  </devices>\n</domain>\n")])])]),a("p",[e._v("这里配置正确镜像地址，interface的地方是macvtap相关的配置。")]),e._v(" "),a("h3",{attrs:{id:"启动虚拟机-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动虚拟机-2"}},[e._v("#")]),e._v(" 启动虚拟机")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# virsh define vm3.xml \nDomain vm3 defined from vm3.xml\nbash-4.2# virsh start vm3     \nDomain vm3 started\n")])])]),a("p",[e._v("启动完后就可以看到macvtap设备被创建出来了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# ip addr\n7: macvtap0@eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 500\n    link/ether 52:54:00:56:e4:20 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::5054:ff:fe56:e420/64 scope link \n       valid_lft forever preferred_lft forever\n")])])]),a("p",[e._v("进入到虚拟机：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("virsh console vm3\n")])])]),a("p",[e._v("如果卡在这一步：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("A start job is running for LSB: Bri... networking\ncloud-init[2253]: 2019-06-27 08:37:09,971 - url_helper.py[WARNING]: Calling 'http://192.168.122.1/latest/meta-data/instance-id' failed [87/120s]: request error\n")])])]),a("p",[e._v("等它超时就好，因为macvtap时我们需要进入虚拟机去配置网络。\n然后就可以进入虚拟机了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("CentOS Linux 7 (Core)\nKernel 3.10.0-957.1.3.el7.x86_64 on an x86_64\n\nlocalhost login: root\nPassword: \nLast login: Thu Jun 27 07:19:32 from gateway\n")])])]),a("p",[e._v("密码是我们上面设置的镜像密码：coolpass")]),e._v(" "),a("h3",{attrs:{id:"配置虚拟机ip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置虚拟机ip"}},[e._v("#")]),e._v(" 配置虚拟机IP")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:56:e4:20 brd ff:ff:ff:ff:ff:ff\n    inet6 fe80::5054:ff:fe56:e420/64 scope link \n       valid_lft forever preferred_lft forever\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# ip addr add 172.17.0.2/16 dev eth0\n[root@localhost ~]# ip route add default via 172.17.0.1 dev eth0\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:56:e4:20 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fe56:e420/64 scope link \n       valid_lft forever preferred_lft forever\n[root@localhost ~]# ip route \ndefault via 172.17.0.1 dev eth0 \n172.17.0.0/16 dev eth0 proto kernel scope link src 172.17.0.2 \n[root@localhost ~]# ping 172.17.0.1\nPING 172.17.0.1 (172.17.0.1) 56(84) bytes of data.\n64 bytes from 172.17.0.1: icmp_seq=1 ttl=64 time=0.622 ms\n64 bytes from 172.17.0.1: icmp_seq=2 ttl=64 time=0.194 ms\n")])])]),a("p",[e._v("配置完后就可以ping通网关了。")]),e._v(" "),a("h4",{attrs:{id:"修改dns配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改dns配置"}},[e._v("#")]),e._v(" 修改DNS配置")]),e._v(" "),a("p",[e._v("这个不改可能会导致ssh时非常慢：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# cat /etc/resolv.conf \n; Created by cloud-init on instance boot automatically, do not edit.\n;\n; generated by /usr/sbin/dhclient-script\nnameserver 114.114.114.114\n")])])]),a("h4",{attrs:{id:"修改sshd配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改sshd配置"}},[e._v("#")]),e._v(" 修改sshd配置")]),e._v(" "),a("p",[e._v("修改/etc/ssh/sshd-config文件，将其中的PermitRootLogin no修改为yes，PubkeyAuthentication yes修改为no，AuthorizedKeysFile .ssh/authorized_keys前面加上#屏蔽掉，PasswordAuthentication no修改为yes就可以了。")]),e._v(" "),a("h4",{attrs:{id:"启动ssh客户端容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动ssh客户端容器"}},[e._v("#")]),e._v(" 启动ssh客户端容器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run --rm -it fanux/libvirt bash\n[root@ee18547e9ed2 /]# ssh root@172.17.0.2\nssh: connect to host 172.17.0.2 port 22: Connection refused\n")])])]),a("p",[e._v("会发现不通, 这是因为容器里的eth0和虚拟机里的eth0都配置了相同的地址导致，只需要把容器里的eth0地址删掉即可：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# ip addr del 172.17.0.2/16 dev eth0\n")])])]),a("p",[e._v("再次ssh即可进入虚拟机：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@ee18547e9ed2 /]# ssh root@172.17.0.2\nThe authenticity of host '172.17.0.2 (172.17.0.2)' can't be established.\nECDSA key fingerprint is SHA256:kTk3yy8588WQHNtwpzS+h6u0W3RELWC8hJQwIwLOkdc.\nECDSA key fingerprint is MD5:0c:f3:b5:69:c6:08:05:14:f8:da:42:2f:85:29:51:d0.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '172.17.0.2' (ECDSA) to the list of known hosts.\nroot@172.17.0.2's password: \nLast login: Thu Jun 27 08:38:00 2019\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    link/ether 52:54:00:56:e4:20 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fe56:e420/64 scope link \n       valid_lft forever preferred_lft forever\n")])])]),a("h4",{attrs:{id:"修改虚拟机mac地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改虚拟机mac地址"}},[e._v("#")]),e._v(" 修改虚拟机mac地址")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# ip link set eth0 address 52:54:00:56:e4:23\n")])])]),a("p",[e._v("会发现就连不上虚拟机了")]),e._v(" "),a("p",[e._v("改回：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@localhost ~]# ip link set eth0 address 52:54:00:56:e4:20\n")])])]),a("p",[e._v("又可正常连接了，为啥？")]),e._v(" "),a("p",[e._v("这是因为虚拟机的eth0的mac地址是必须与macvtap0的mac地址保持一样，原理很简单")]),e._v(" "),a("ol",[a("li",[e._v("ARP时问IP地址是172.17.0.2的机器mac地址是什么")]),e._v(" "),a("li",[e._v("虚拟机回了一个52:54:00:56:e4:20")]),e._v(" "),a("li",[e._v("macvtap0是可以理解成挂在网桥端口上的，这样就把包发给macvtap0了（因为mac地址一样,不一样就不会发给macvtap了）")]),e._v(" "),a("li",[e._v("macvtap0就把包丢给qemu应用进程（最终到虚拟机eth0）")])]),e._v(" "),a("h2",{attrs:{id:"裸用qemu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#裸用qemu"}},[e._v("#")]),e._v(" 裸用qemu")]),e._v(" "),a("p",[e._v("以上是通过libvirt进行使用的，这样屏蔽了很多底层的细节，如果是直接使用qemu命令需要如下操作：")]),e._v(" "),a("p",[e._v("创建macvtap设备：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ip link add link eth0 name macvtap0 type macvtap mode bridge\nip link set macvtap0 address 1a:46:0b:ca:bc:7b up\nbash-4.2# cat /sys/class/net/macvtap0/ifindex  # 对应下面命令的/dev/tap2\n2\nbash-4.2# cat /sys/class/net/macvtap0/address # 与qemu mac地址配置一致\n1a:46:0b:ca:bc:7b\n")])])]),a("p",[e._v("启动qemu,然后虚拟机里面的地址配置同libvirt，可以通过vnc客户端（vnc viewer）进入虚拟机配置，不在赘述:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# qemu-system-x86_64 -enable-kvm /root/CentOS-7-x86_64-GenericCloud.qcow2\\\n-netdev tap,fd=30,id=hostnet0,vhost=on,vhostfd=4 30<>/dev/tap2 4<>/dev/vhost-net \\\n-device virtio-net-pci,netdev=hostnet0,id=net0,mac=1a:46:0b:ca:bc:7b   \\\n-monitor telnet:127.0.0.1:5801,server,nowait\nVNC server running on ::1:5900\n")])])]),a("h2",{attrs:{id:"cloud-init介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cloud-init介绍"}},[e._v("#")]),e._v(" cloud-init介绍")]),e._v(" "),a("p",[e._v("上文提到，通过macvtap技术配置虚拟机网卡地址是需要进入虚拟机配置的, 然而我们实现一个虚拟机管理系统时显然不会手动进入去配置，这就需要cloud-init了")]),e._v(" "),a("p",[e._v("它可以帮助我们在虚拟机启动时配置虚拟机，如配置密码，配置网络，执行命令和写一些文件等。\n先创建一个user-data文件，里面内容如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#cloud-config\nwrite_files:\n - content: |\n    DEVICE=eth0\n    ONBOOT=yes\n    TYPE=Ethernet\n    USERCTL=no\n    IPADDR=172.17.0.2\n    NETMASK=255.255.0.0\n    GATEWAY=172.17.0.1\n    BOOTPROTO=static\n    DNS1=172.17.0.1\n    ONBOOT=yes\n   path: /etc/sysconfig/network-scripts/ifcfg-eth0\nruncmd:\n - systemctl start network\ngroups:\n  - centos: [root]\n  - cloud-users\nssh_pwauth: yes\nchpasswd:\n    expire: false\n    list: |\n        user1:222222\n        root:333333\n")])])]),a("p",[e._v("创建cloud-init镜像文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("yum install -y cloud-utils\ncloud-localds my-seed.img user-data\n")])])]),a("p",[e._v("libvirt中使用该镜像")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  <disk type='file' device='disk'>\n       <driver name='qemu' type='raw'/>\n       <source file='/root/my-seed.img'/>\n       <target dev='vdb' bus='virtio'/>\n  </disk>\n")])])]),a("p",[e._v("为了防止cloud-init走网络获取metadata，因为网卡没设置好所以会卡住五分钟，我们直接把网络获取metadata禁止掉：")]),e._v(" "),a("p",[e._v("vi /etc/cloud/cloud.cfg.d/05_logging.cfg")]),e._v(" "),a("p",[e._v("加上：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("network:\n  config: disabled\n")])])]),a("p",[e._v("然后启动虚拟机即可")]),e._v(" "),a("h2",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[e._v("#")]),e._v(" 常见问题")]),e._v(" "),a("blockquote",[a("p",[e._v("Inappropriate ioctl for device")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("qemu-system-x86_64: -net tap,fd=5: TUNGETIFF ioctl() failed: Inappropriate ioctl for device\nTUNSETOFFLOAD ioctl() failed: Inappropriate ioctl for device\n")])])]),a("p",[e._v("因为容器没有挂载/dev目录")]),e._v(" "),a("blockquote",[a("p",[e._v("KVM bios被禁")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@helix105 ~]# docker run busybox uname -a\nCould not access KVM kernel module: No such file or directory\nqemu-lite-system-x86_64: failed to initialize KVM: No such file or directory\n\n/usr/bin/docker-current: Error response from daemon: oci runtime error: Unable to launch /usr/bin/qemu-lite-system-x86_64: exit status 1.\nERRO[0001] error getting events from daemon: net/http: request canceled \n[root@helix105 ~]# lsmod |grep kvm\nkvm                   598016  0 \nirqbypass              16384  1 kvm\n[root@helix105 ~]# modprobe kvm-intel\nmodprobe: ERROR: could not insert 'kvm_intel': Operation not supported\nYou have mail in /var/spool/mail/root\n[root@helix105 ~]# dmesg |grep kvm\n[    8.239309] kvm: disabled by bios\n")])])]),a("p",[e._v("这个要进bios打开")]),e._v(" "),a("blockquote",[a("p",[e._v("KVM: Permission denied")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bash-4.2# virsh start vm_name1\nerror: Failed to start domain vm_name1\nerror: internal error: qemu unexpectedly closed the monitor: Could not access KVM kernel module: Permission denied\n2019-06-20T07:26:33.304320Z qemu-system-x86_64: failed to initialize KVM: Permission denied\n")])])]),a("p",[e._v("解决办法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#chown root:kvm /dev/kvm\n修改/etc/libvirt/qemu.conf，\n#user="root"\nuser="root"\n#group="root"\ngroup="root"\n重启服务\n#service libvirtd restart，问题解决了\n')])])]),a("p",[e._v("探讨可加QQ群：98488045")])])}),[],!1,null,null,null);t.default=r.exports}}]);