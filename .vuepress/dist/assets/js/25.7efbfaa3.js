(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{222:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"etcd管南"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#etcd管南"}},[e._v("#")]),e._v(" etcd管南")]),e._v(" "),n("h2",{attrs:{id:"etcd-证书配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#etcd-证书配置"}},[e._v("#")]),e._v(" etcd 证书配置")]),e._v(" "),n("p",[e._v("生产环境中给etcd配置证书相当重要，如果没有证书，那么k8s集群很容易被黑客利用而去挖矿什么的。做法非常简单，比如你下了一个不安全的镜像，通过程序扫描到etcd的ip和端口，那么黑客就可以绕开apiserver的认证直接写数据，写一些deployment pod等等，apiserver就会读到这些，从而去部署黑客的程序。 我们就有一个集群这样被利用去挖矿了,安全无小事，如果黑客恶意攻击也可轻松删除你的所有数据，所以证书与定期备份都很重要,即便有多个etcd节点，本文深入探讨etcd管理的重要的几个东西。\n")]),e._v(" "),n("h2",{attrs:{id:"证书生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#证书生成"}},[e._v("#")]),e._v(" 证书生成")]),e._v(" "),n("p",[e._v("cfssl安装：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mkdir ~/cfssl\ncd ~/cfssl\n")])])]),n("p",[e._v("写入如下json文件，ip替换成自己的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('root@dev-86-201 cfssl]# cat ca-config.json\n{\n    "signing": {\n        "default": {\n            "expiry": "43800h"\n        },\n        "profiles": {\n            "server": {\n                "expiry": "43800h",\n                "usages": [\n                    "signing",\n                    "key encipherment",\n                    "server auth"\n                ]\n            },\n            "client": {\n                "expiry": "43800h",\n                "usages": [\n                    "signing",\n                    "key encipherment",\n                    "client auth"\n                ]\n            },\n            "peer": {\n                "expiry": "43800h",\n                "usages": [\n                    "signing",\n                    "key encipherment",\n                    "server auth",\n                    "client auth"\n                ]\n            }\n        }\n    }\n}\n[root@dev-86-201 cfssl]# cat ca-csr.json\n{\n    "CN": "My own CA",\n    "key": {\n        "algo": "rsa",\n        "size": 2048\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "O": "My Company Name",\n            "ST": "San Francisco",\n            "OU": "Org Unit 1",\n            "OU": "Org Unit 2"\n        }\n    ]\n}\n[root@dev-86-201 cfssl]# cat server.json\n{\n    "CN": "etcd0",\n    "hosts": [\n        "127.0.0.1",\n        "0.0.0.0",\n        "10.1.86.201",\n        "10.1.86.203",\n        "10.1.86.202"\n    ],\n    "key": {\n        "algo": "ecdsa",\n        "size": 256\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "ST": "San Francisco"\n        }\n    ]\n}\n\n[root@dev-86-201 cfssl]# cat member1.json  # 填本机IP\n{\n    "CN": "etcd0",\n    "hosts": [\n        "10.1.86.201"\n    ],\n    "key": {\n        "algo": "ecdsa",\n        "size": 256\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "ST": "San Francisco"\n        }\n    ]\n}\n\n[root@dev-86-201 cfssl]# cat client.json\n{\n    "CN": "client",\n    "hosts": [\n       ""\n    ],\n    "key": {\n        "algo": "ecdsa",\n        "size": 256\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "ST": "San Francisco"\n        }\n    ]\n}\n')])])]),n("p",[e._v("生成证书：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer member1.json | cfssljson -bare member1\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client client.json | cfssljson -bare client\n")])])]),n("h2",{attrs:{id:"启动etcd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动etcd"}},[e._v("#")]),e._v(" 启动etcd")]),e._v(" "),n("p",[e._v("cfssl目录拷贝到/etc/kubernetes/pki/cfssl 目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@dev-86-201 manifests]# cat etcd.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    scheduler.alpha.kubernetes.io/critical-pod: ""\n  creationTimestamp: null\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --advertise-client-urls=https://10.1.86.201:2379\n    - --cert-file=/etc/kubernetes/pki/etcd/server.pem\n    - --client-cert-auth=true\n    - --data-dir=/var/lib/etcd\n    - --initial-advertise-peer-urls=https://10.1.86.201:2380\n    - --initial-cluster=etcd0=https://10.1.86.201:2380\n    - --key-file=/etc/kubernetes/pki/etcd/server-key.pem\n    - --listen-client-urls=https://10.1.86.201:2379\n    - --listen-peer-urls=https://10.1.86.201:2380\n    - --name=etcd0\n    - --peer-cert-file=/etc/kubernetes/pki/etcd/member1.pem\n    - --peer-client-cert-auth=true\n    - --peer-key-file=/etc/kubernetes/pki/etcd/member1-key.pem\n    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --snapshot-count=10000\n    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    image: k8s.gcr.io/etcd-amd64:3.2.18\n    imagePullPolicy: IfNotPresent\n   #livenessProbe:\n   #  exec:\n   #    command:\n   #    - /bin/sh\n   #    - -ec\n   #    - ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.201]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.pem\n   #      --cert=/etc/kubernetes/pki/etcd/client.pem --key=/etc/kubernetes/pki/etcd/client-key.pem\n   #      get foo\n   #  failureThreshold: 8\n   #  initialDelaySeconds: 15\n   #  timeoutSeconds: 15\n    name: etcd\n    resources: {}\n    volumeMounts:\n    - mountPath: /var/lib/etcd\n      name: etcd-data\n    - mountPath: /etc/kubernetes/pki/etcd\n      name: etcd-certs\n  hostNetwork: true\n  priorityClassName: system-cluster-critical\n  volumes:\n  - hostPath:\n      path: /var/lib/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\n  - hostPath:\n      path: /etc/kubernetes/pki/cfssl\n      type: DirectoryOrCreate\n    name: etcd-certs\nstatus: {}\n')])])]),n("p",[e._v("进入etcd容器执行：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('alias etcdv3="ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.201]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/client.pem --key=/etc/kubernetes/pki/etcd/client-key.pem"\netcdv3 member add etcd1 --peer-urls="https://10.1.86.202:2380"\n')])])]),n("h2",{attrs:{id:"增加节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#增加节点"}},[e._v("#")]),e._v(" 增加节点")]),e._v(" "),n("p",[e._v("拷贝etcd0(10.1.86.201)节点上的证书到etcd1(10.1.86.202)节点上\n修改member1.json:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "CN": "etcd1",\n    "hosts": [\n        "10.1.86.202"\n    ],\n    "key": {\n        "algo": "ecdsa",\n        "size": 256\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "ST": "San Francisco"\n        }\n    ]\n}\n')])])]),n("p",[e._v("重新生成在etcd1上生成member1证书：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer member1.json | cfssljson -bare member1\n")])])]),n("p",[e._v("启动etcd1：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@dev-86-202 manifests]# cat etcd.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    scheduler.alpha.kubernetes.io/critical-pod: ""\n  creationTimestamp: null\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --advertise-client-urls=https://10.1.86.202:2379\n    - --cert-file=/etc/kubernetes/pki/etcd/server.pem\n    - --data-dir=/var/lib/etcd\n    - --initial-advertise-peer-urls=https://10.1.86.202:2380\n    - --initial-cluster=etcd0=https://10.1.86.201:2380,etcd1=https://10.1.86.202:2380\n    - --key-file=/etc/kubernetes/pki/etcd/server-key.pem\n    - --listen-client-urls=https://10.1.86.202:2379\n    - --listen-peer-urls=https://10.1.86.202:2380\n    - --name=etcd1\n    - --peer-cert-file=/etc/kubernetes/pki/etcd/member1.pem\n    - --peer-client-cert-auth=true\n    - --peer-key-file=/etc/kubernetes/pki/etcd/member1-key.pem\n    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --snapshot-count=10000\n    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --initial-cluster-state=existing  # 千万别加双引号，被坑死\n    image: k8s.gcr.io/etcd-amd64:3.2.18\n    imagePullPolicy: IfNotPresent\n  # livenessProbe:\n  #   exec:\n  #     command:\n  #     - /bin/sh\n  #     - -ec\n  #     - ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.202]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt\n  #       --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key\n  #       get foo\n  #   failureThreshold: 8\n  #   initialDelaySeconds: 15\n  #   timeoutSeconds: 15\n    name: etcd\n    resources: {}\n    volumeMounts:\n    - mountPath: /var/lib/etcd\n      name: etcd-data\n    - mountPath: /etc/kubernetes/pki/etcd\n      name: etcd-certs\n  hostNetwork: true\n  priorityClassName: system-cluster-critical\n  volumes:\n  - hostPath:\n      path: /var/lib/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\n  - hostPath:\n      path: /etc/kubernetes/pki/cfssl\n      type: DirectoryOrCreate\n    name: etcd-certs\nstatus: {}\n')])])]),n("p",[e._v("或者用docker起先测试一下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('docker run --net=host -v /etc/kubernetes/pki/cfssl:/etc/kubernetes/pki/etcd k8s.gcr.io/etcd-amd64:3.2.18 etcd \\\n--advertise-client-urls=https://10.1.86.202:2379 \\\n--cert-file=/etc/kubernetes/pki/etcd/server.pem \\\n--data-dir=/var/lib/etcd \\\n--initial-advertise-peer-urls=https://10.1.86.202:2380 \\\n--initial-cluster=etcd0=https://10.1.86.201:2380,etcd1=https://10.1.86.202:2380 \\\n--key-file=/etc/kubernetes/pki/etcd/server-key.pem  \\\n--listen-client-urls=https://10.1.86.202:2379 \\\n--listen-peer-urls=https://10.1.86.202:2380 --name=etcd1 \\\n--peer-cert-file=/etc/kubernetes/pki/etcd/member1.pem \\\n--peer-key-file=/etc/kubernetes/pki/etcd/member1-key.pem \\\n--peer-client-cert-auth=true \\\n--peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem --snapshot-count=10000 \\\n--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem --initial-cluster-state="existing"\n')])])]),n("p",[e._v("etcd0上检查集群健康:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# etcdctl --endpoints=https://[10.1.86.201]:2379 --ca-file=/etc/kubernetes/pki/etcd/ca.pem --cert-file=/etc/kubernetes/pki/etcd/client.pem --key-file=/etc/kubernetes/pki/etcd/client-key.pem cluster-heal\nth\nmember 5856099674401300 is healthy: got healthy result from https://10.1.86.201:2379\nmember df99f445ac908d15 is healthy: got healthy result from https://10.1.86.202:2379\ncluster is healthy\n")])])]),n("p",[e._v("etcd2增加同理，略")]),e._v(" "),n("p",[e._v("apiserver etcd证书 配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("- --etcd-cafile=/etc/kubernetes/pki/cfssl/ca.pem\n- --etcd-certfile=/etc/kubernetes/pki/cfssl/client.pem\n- --etcd-keyfile=/etc/kubernetes/pki/cfssl/client-key.pem\n")])])]),n("h1",{attrs:{id:"快照与扩展节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快照与扩展节点"}},[e._v("#")]),e._v(" 快照与扩展节点")]),e._v(" "),n("h2",{attrs:{id:"etcd快照恢复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#etcd快照恢复"}},[e._v("#")]),e._v(" etcd快照恢复")]),e._v(" "),n("p",[e._v("说明：\n有证书集群以下所有命令需带上如下证书参数，否则访问不了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key\n")])])]),n("p",[e._v("endpoints默认为"),n("code",[e._v("127.0.0.1:2379")]),e._v("，若需指定远程etcd地址，可通过如下参数指定")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--endpoints 172.16.154.81:2379\n")])])]),n("p",[e._v("1、获取数据快照")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ETCDCTL_API=3 etcdctl snapshot save snapshot.db\n")])])]),n("p",[e._v("2、从快照恢复数据")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ETCDCTL_API=3 etcdctl snapshot restore snapshot.db --data-dir=/var/lib/etcd/\n")])])]),n("p",[e._v("3、启动新etcd节点，指定--data-dir=/var/lib/etcd/")]),e._v(" "),n("h2",{attrs:{id:"etcd节点扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#etcd节点扩展"}},[e._v("#")]),e._v(" etcd节点扩展")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("节点名")]),e._v(" "),n("th",[e._v("IP")]),e._v(" "),n("th",[e._v("备注")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("infra0")]),e._v(" "),n("td",[e._v("172.16.154.81")]),e._v(" "),n("td",[e._v("初始节点，k8s的master节点，kubeadm所部署的单节点etcd所在机器")])]),e._v(" "),n("tr",[n("td",[e._v("infra1")]),e._v(" "),n("td",[e._v("172.16.154.82")]),e._v(" "),n("td",[e._v("待添加节点，k8s的node节点")])]),e._v(" "),n("tr",[n("td",[e._v("infra2")]),e._v(" "),n("td",[e._v("172.16.154.83")]),e._v(" "),n("td",[e._v("待添加节点，k8s的node节点")])])])]),e._v(" "),n("p",[e._v("1、从初始etcd节点获取数据快照")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ETCDCTL_API=3 etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key --endpoints=https://127.0.0.1:2379 snapshot save snapshot.db\n")])])]),n("p",[e._v("2、将快照文件snapshot.db复制到infra1节点，并执行数据恢复命令")]),e._v(" "),n("p",[e._v("数据恢复命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ETCDCTL_API=3 etcdctl snapshot restore snapshot.db --data-dir=/var/lib/etcd/\n\n注：执行上述命令需要机器上有etcdctl\n")])])]),n("p",[e._v("上述命令执行成功会将快照中的数据存放到/var/lib/etcd目录中")]),e._v(" "),n("p",[e._v("3、在infra1节点启动etcd\n将如下yaml放入/etc/kubernetes/manifests")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd-172.16.154.82\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --name=infra0\n    - --initial-advertise-peer-urls=http://172.16.154.82:2380\n    - --listen-peer-urls=http://172.16.154.82:2380\n    - --listen-client-urls=http://172.16.154.82:2379,http://127.0.0.1:2379\n    - --advertise-client-urls=http://172.16.154.82:2379\n    - --data-dir=/var/lib/etcd\n    - --initial-cluster-token=etcd-cluster-1\n    - --initial-cluster=infra0=http://172.16.154.82:2380\n    - --initial-cluster-state=new\n    image: hub.xfyun.cn/k8s/etcd-amd64:3.1.12\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /health\n        port: 2379\n        scheme: HTTP\n      failureThreshold: 8\n      initialDelaySeconds: 15\n      timeoutSeconds: 15\n    name: etcd\n    volumeMounts:\n    - name: etcd-data\n      mountPath: /var/lib/etcd\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /var/lib/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\n")])])]),n("p",[e._v("4、infra2节点加入etcd集群中\n在infra1中etcd容器中执行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ETCDCTL_API=3 etcdctl member add infra2 --peer-urls="http://172.16.154.83:2380"\n')])])]),n("p",[e._v("将如下yaml放入/etc/kubernetes/manifests，由kubelet启动etcd容器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd-172.16.154.83\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --name=infra1\n    - --initial-advertise-peer-urls=http://172.16.154.83:2380\n    - --listen-peer-urls=http://172.16.154.83:2380\n    - --listen-client-urls=http://172.16.154.83:2379,http://127.0.0.1:2379\n    - --advertise-client-urls=http://172.16.154.83:2379\n    - --data-dir=/var/lib/etcd\n    - --initial-cluster-token=etcd-cluster-1\n    - --initial-cluster=infra1=http://172.16.154.82:2380,infra2=http://172.16.154.83:2380\n    - --initial-cluster-state=existing\n    image: hub.xfyun.cn/k8s/etcd-amd64:3.1.12\n    livenessProbe:\n      httpGet:\n        host: 127.0.0.1\n        path: /health\n        port: 2379\n        scheme: HTTP\n      failureThreshold: 8\n      initialDelaySeconds: 15\n      timeoutSeconds: 15\n    name: etcd\n    volumeMounts:\n    - name: etcd-data\n      mountPath: /var/lib/etcd\n  hostNetwork: true\n  volumes:\n  - hostPath:\n      path: /home/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\n")])])]),n("p",[e._v("infra0节点加入集群重复上述操作；注意在加入集群之前，将之前/var/lib/etcd/的数据删除。")]),e._v(" "),n("h1",{attrs:{id:"实践-给kubeadm单etcd增加etcd节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实践-给kubeadm单etcd增加etcd节点"}},[e._v("#")]),e._v(" 实践 - 给kubeadm单etcd增加etcd节点")]),e._v(" "),n("h2",{attrs:{id:"环境介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境介绍"}},[e._v("#")]),e._v(" 环境介绍")]),e._v(" "),n("p",[e._v("10.1.86.201   单点etcd   etcd0")]),e._v(" "),n("p",[e._v("10.1.86.202   扩展节点   etcd1")]),e._v(" "),n("p",[e._v("10.1.86.203   扩展节点   etcd2")]),e._v(" "),n("h2",{attrs:{id:"安装k8s"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装k8s"}},[e._v("#")]),e._v(" 安装k8s")]),e._v(" "),n("p",[e._v("先在etcd0节点上启动k8s，当然是使用"),n("a",{attrs:{href:"https://sealyun.com/pro/products/",target:"_blank",rel:"noopener noreferrer"}},[e._v("sealyun的安装包"),n("OutboundLink")],1),e._v(" 三步安装不多说")]),e._v(" "),n("h2",{attrs:{id:"修改证书"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改证书"}},[e._v("#")]),e._v(" 修改证书")]),e._v(" "),n("p",[e._v("按照上述生成证书的方法生成证书并拷贝到对应目录下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cp -r cfssl/ /etc/kubernetes/pki/\n")])])]),n("h2",{attrs:{id:"修改etcd配置："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改etcd配置："}},[e._v("#")]),e._v(" 修改etcd配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cd /etc/kubernetes/manifests/\nmv etcd.yaml ..   # 不要直接修改，防止k8s去读swap文件\nvim ../etcd.yaml\n")])])]),n("p",[e._v("vim里面全局替换，把127.0.0.1替换成ip地址")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(":%s/127.0.0.1/10.1.86.201/g\n")])])]),n("p",[e._v("注释掉健康检测探针，否则加节点时健康检测会导致etcd0跪掉")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#   livenessProbe:\n#     exec:\n#       command:\n#       - /bin/sh\n#       - -ec\n#       - ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.201]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt\n#         --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key\n#         get foo\n#     failureThreshold: 8\n#     initialDelaySeconds: 15\n#     timeoutSeconds: 15\n")])])]),n("p",[e._v("修改证书挂载配置目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  volumes:\n  - hostPath:\n      path: /etc/kubernetes/pki/cfssl\n      type: DirectoryOrCreate\n    name: etcd-certs\n")])])]),n("p",[e._v("修改证书配置,全改完长这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@dev-86-201 manifests]# cat ../etcd.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    scheduler.alpha.kubernetes.io/critical-pod: ""\n  creationTimestamp: null\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --advertise-client-urls=https://10.1.86.201:2379\n    - --cert-file=/etc/kubernetes/pki/etcd/server.pem\n    - --client-cert-auth=true\n    - --data-dir=/var/lib/etcd\n    - --initial-advertise-peer-urls=https://10.1.86.201:2380\n    - --initial-cluster=etcd0=https://10.1.86.201:2380\n    - --key-file=/etc/kubernetes/pki/etcd/server-key.pem\n    - --listen-client-urls=https://10.1.86.201:2379\n    - --listen-peer-urls=https://10.1.86.201:2380\n    - --name=dev-86-201\n    - --peer-cert-file=/etc/kubernetes/pki/etcd/member1.pem\n    - --peer-client-cert-auth=true\n    - --peer-key-file=/etc/kubernetes/pki/etcd/member1-key.pem\n    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --snapshot-count=10000\n    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    image: k8s.gcr.io/etcd-amd64:3.2.18\n    imagePullPolicy: IfNotPresent\n#   livenessProbe:\n#     exec:\n#       command:\n#       - /bin/sh\n#       - -ec\n#       - ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.201]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt\n#         --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key\n#         get foo\n#     failureThreshold: 8\n#     initialDelaySeconds: 15\n#     timeoutSeconds: 15\n    name: etcd\n    resources: {}\n    volumeMounts:\n    - mountPath: /var/lib/etcd\n      name: etcd-data\n    - mountPath: /etc/kubernetes/pki/etcd\n      name: etcd-certs\n  hostNetwork: true\n  priorityClassName: system-cluster-critical\n  volumes:\n  - hostPath:\n      path: /etc/kubernetes/pki/cfssl\n      type: DirectoryOrCreate\n    name: etcd-certs\n  - hostPath:\n      path: /var/lib/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\nstatus: {}\n')])])]),n("p",[e._v("启动etcd, 把yaml文件移回来：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mv ../etcd.yaml .\n")])])]),n("p",[e._v("修改APIserver参数：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mv kube-apiserver.yaml ..\nvim ../kube-apiserver.yaml\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    - --etcd-cafile=/etc/kubernetes/pki/cfssl/ca.pem\n    - --etcd-certfile=/etc/kubernetes/pki/cfssl/client.pem\n    - --etcd-keyfile=/etc/kubernetes/pki/cfssl/client-key.pem\n    - --etcd-servers=https://10.1.86.201:2379\n")])])]),n("p",[e._v("启动apiserver:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mv ../kube-apiserver.yaml .\n")])])]),n("p",[e._v("验证：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get pod -n kube-system  # 能正常返回pod标志成功\n")])])]),n("p",[e._v("到此etcd0上的操作完成")]),e._v(" "),n("p",[e._v("增加新节点, 进入到etcd容器内:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@dev-86-201 ~]# docker exec -it a7001397e1e5 sh\n/ # alias etcdv3="ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.201]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.pem --cert=/etc/kubernetes/pki/etcd/client.pem --key=/etc/kubernetes/pki/etcd/client-key\n.pem"\n/ # etcdv3 member update a874c87fd42044f  --peer-urls="https://10.1.86.201:2380" # 更新peer url 很重要\n/ # etcdv3 member add etcd1 --peer-urls="https://10.1.86.202:2380"\nMember 20c2a99381581958 added to cluster c9be114fc2da2776\n\nETCD_NAME="etcd1"\nETCD_INITIAL_CLUSTER="dev-86-201=https://127.0.0.1:2380,etcd1=https://10.1.86.202:2380"\nETCD_INITIAL_CLUSTER_STATE="existing"\n\n/ # alias etcdv2="ETCDCTL_API=2 etcdctl --endpoints=https://[10.1.86.201]:2379 --ca-file=/etc/kubernetes/pki/etcd/ca.pem --cert-file=/etc/kubernetes/pki/etcd/client.pem --key-file=/etc/kubernetes/pki/etcd/client-key.pem"\n/ # etcdv2 cluster-health\n')])])]),n("h2",{attrs:{id:"etcd1上增加一个etcd节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#etcd1上增加一个etcd节点"}},[e._v("#")]),e._v(" etcd1上增加一个etcd节点")]),e._v(" "),n("p",[e._v("同样先在etcd1（10.1.86.202) 上安装k8s，同etcd0上的安装")]),e._v(" "),n("p",[e._v("把etcd0的cfssl证书目录拷贝到etcd1上备用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("scp -r root@10.1.86.201:/etc/kubernetes/pki/cfssl /etc/kubernetes/pki\n")])])]),n("p",[e._v("修改member1.json:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@dev-86-202 cfssl]# cat member1.json\n{\n    "CN": "etcd1",      # CN 改一下\n    "hosts": [\n        "10.1.86.202"   # 主要改成自身ip\n    ],\n    "key": {\n        "algo": "ecdsa",\n        "size": 256\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "ST": "San Francisco"\n        }\n    ]\n}\n')])])]),n("p",[e._v("重新生成member1证书：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer member1.json | cfssljson -bare member1\n")])])]),n("p",[e._v("验证证书：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("openssl x509 -in member1.pem -text -noout\n")])])]),n("p",[e._v("修改etcd1的etcd配置：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mv etcd.yaml ..\nrm /var/lib/etcd/ -rf # 因为这是个扩展节点，需要同步etcd0的数据，所以把它自己数据删掉\nvim ../etcd.yaml\n")])])]),n("p",[e._v("修改后yaml文件u")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('apiVersion: v1\nkind: Pod\nmetadata:\n  annotations:\n    scheduler.alpha.kubernetes.io/critical-pod: ""\n  creationTimestamp: null\n  labels:\n    component: etcd\n    tier: control-plane\n  name: etcd\n  namespace: kube-system\nspec:\n  containers:\n  - command:\n    - etcd\n    - --advertise-client-urls=https://10.1.86.202:2379\n    - --cert-file=/etc/kubernetes/pki/etcd/server.pem\n    - --data-dir=/var/lib/etcd\n    - --initial-advertise-peer-urls=https://10.1.86.202:2380\n    - --initial-cluster=etcd0=https://10.1.86.201:2380,etcd1=https://10.1.86.202:2380\n    - --key-file=/etc/kubernetes/pki/etcd/server-key.pem\n    - --listen-client-urls=https://10.1.86.202:2379\n    - --listen-peer-urls=https://10.1.86.202:2380\n    - --name=etcd1\n    - --peer-cert-file=/etc/kubernetes/pki/etcd/member1.pem\n    - --peer-client-cert-auth=true\n    - --peer-key-file=/etc/kubernetes/pki/etcd/member1-key.pem\n    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --snapshot-count=10000\n    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\n    - --initial-cluster-state=existing  # 千万别加双引号，被坑死\n    image: k8s.gcr.io/etcd-amd64:3.2.18\n    imagePullPolicy: IfNotPresent\n  # livenessProbe:\n  #   exec:\n  #     command:\n  #     - /bin/sh\n  #     - -ec\n  #     - ETCDCTL_API=3 etcdctl --endpoints=https://[10.1.86.202]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt\n  #       --cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt --key=/etc/kubernetes/pki/etcd/healthcheck-client.key\n  #       get foo\n  #   failureThreshold: 8\n  #   initialDelaySeconds: 15\n  #   timeoutSeconds: 15\n    name: etcd\n    resources: {}\n    volumeMounts:\n    - mountPath: /var/lib/etcd\n      name: etcd-data\n    - mountPath: /etc/kubernetes/pki/etcd\n      name: etcd-certs\n  hostNetwork: true\n  priorityClassName: system-cluster-critical\n  volumes:\n  - hostPath:\n      path: /var/lib/etcd\n      type: DirectoryOrCreate\n    name: etcd-data\n  - hostPath:\n      path: /etc/kubernetes/pki/cfssl\n      type: DirectoryOrCreate\n    name: etcd-certs\nstatus: {}\n')])])]),n("p",[e._v("在容器内查看集群已经健康运行了：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/ # alias etcdv2="ETCDCTL_API=2 etcdctl --endpoints=https://[10.1.86.201]:2379 --ca-file=/etc/kubernetes/pki/etcd/ca.pem --cert-file=/etc/kubernetes/pki/etcd/client.pem --key-file=/etc/kubernetes/pki/etcd/client-key.pem"\n/ # etcdv2 cluster-health\nmember a874c87fd42044f is healthy: got healthy result from https://10.1.86.201:2379\nmember bbbbf223ec75e000 is healthy: got healthy result from https://10.1.86.202:2379\ncluster is healthy\n')])])]),n("p",[e._v("然后就可以把apiserver启动参数再加一个etcd1:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    - --etcd-servers=https://10.1.86.201:2379\n    - --etcd-servers=https://10.1.86.202:2379\n")])])]),n("p",[e._v("第三个节点同第二个，不再赘述。\n同样我们可以把健康检查的注释去掉了。后面再加时不需要再注释了，因为两个节点的集群已经能正常工作了。")]),e._v(" "),n("p",[e._v("细节问题非常多，一个端口，一个IP都不要填错，否则就会各种错误, 包括新加节点要清etcd数据这些小细节问题。\n大功告成！")])])}),[],!1,null,null,null);t.default=a.exports}}]);